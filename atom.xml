<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wang19ccn.github.io/</id>
    <title>April</title>
    <updated>2021-08-01T19:10:27.708Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wang19ccn.github.io/"/>
    <link rel="self" href="https://wang19ccn.github.io/atom.xml"/>
    <subtitle>&lt;p&gt;一花一世界，一叶一追寻，一曲一场叹，一生一为人。&lt;/p&gt;</subtitle>
    <logo>https://wang19ccn.github.io/images/avatar.png</logo>
    <icon>https://wang19ccn.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, April</rights>
    <entry>
        <title type="html"><![CDATA[CURL常用命令]]></title>
        <id>https://wang19ccn.github.io/post/curl-chang-yong-ming-ling/</id>
        <link href="https://wang19ccn.github.io/post/curl-chang-yong-ming-ling/">
        </link>
        <updated>2021-08-01T17:41:15.000Z</updated>
        <content type="html"><![CDATA[<p>-a/--append 上传文件时，附加到目标文件<br>
-A/--user-agent <string>  设置用户代理发送给服务器</p>
<ul>
<li>anyauth   可以使用“任何”身份验证方法<br>
-b/--cookie &lt;name=string/file&gt; cookie字符串或文件读取位置</li>
<li>basic 使用HTTP基本验证<br>
-B/--use-ascii 使用ASCII /文本传输<br>
-c/--cookie-jar <file> 操作结束后把cookie写入到这个文件中<br>
-C/--continue-at <offset>  断点续转<br>
-d/--data <data>   HTTP POST方式传送数据<br>
--data-ascii <data>  以ascii的方式post数据<br>
--data-binary <data> 以二进制的方式post数据<br>
--negotiate     使用HTTP身份验证<br>
--digest        使用数字身份验证<br>
--disable-eprt  禁止使用EPRT或LPRT<br>
--disable-epsv  禁止使用EPSV<br>
-D/--dump-header <file> 把header信息写入到该文件中<br>
--egd-file <file> 为随机数据(SSL)设置EGD socket路径<br>
--tcp-nodelay   使用TCP_NODELAY选项<br>
-e/--referer 来源网址<br>
-E/--cert &lt;cert[:passwd]&gt; 客户端证书文件和密码 (SSL)<br>
--cert-type <type> 证书文件类型 (DER/PEM/ENG) (SSL)<br>
--key <key>     私钥文件名 (SSL)<br>
--key-type <type> 私钥文件类型 (DER/PEM/ENG) (SSL)<br>
--pass  <pass>  私钥密码 (SSL)<br>
--engine <eng>  加密引擎使用 (SSL). &quot;--engine list&quot; for list<br>
--cacert <file> CA证书 (SSL)<br>
--capath <directory> CA目录 (made using c_rehash) to verify peer against (SSL)<br>
--ciphers <list>  SSL密码<br>
--compressed    要求返回是压缩的形势 (using deflate or gzip)<br>
--connect-timeout <seconds> 设置最大请求时间<br>
--create-dirs   建立本地目录的目录层次结构<br>
--crlf          上传是把LF转变成CRLF<br>
-f/--fail          连接失败时不显示http错误<br>
--ftp-create-dirs 如果远程目录不存在，创建远程目录<br>
--ftp-method [multicwd/nocwd/singlecwd] 控制CWD的使用<br>
--ftp-pasv      使用 PASV/EPSV 代替端口<br>
--ftp-skip-pasv-ip 使用PASV的时候,忽略该IP地址<br>
--ftp-ssl       尝试用 SSL/TLS 来进行ftp数据传输<br>
--ftp-ssl-reqd  要求用 SSL/TLS 来进行ftp数据传输<br>
-F/--form &lt;name=content&gt; 模拟http表单提交数据<br>
-form-string &lt;name=string&gt; 模拟http表单提交数据<br>
-g/--globoff 禁用网址序列和范围使用{}和[]<br>
-G/--get 以get的方式来发送数据<br>
-h/--help 帮助<br>
-H/--header <line>自定义头信息传递给服务器<br>
--ignore-content-length  忽略的HTTP头信息的长度<br>
-i/--include 输出时包括protocol头信息<br>
-I/--head  只显示文档信息<br>
从文件中读取-j/--junk-session-cookies忽略会话Cookie</li>
<li>界面<interface>指定网络接口/地址使用</li>
<li>krb4 &lt;级别&gt;启用与指定的安全级别krb4<br>
-j/--junk-session-cookies 读取文件进忽略session cookie<br>
--interface <interface> 使用指定网络接口/地址<br>
--krb4 <level>  使用指定安全级别的krb4<br>
-k/--insecure 允许不使用证书到SSL站点<br>
-K/--config  指定的配置文件读取<br>
-l/--list-only 列出ftp目录下的文件名称<br>
--limit-rate <rate> 设置传输速度<br>
--local-port<NUM> 强制使用本地端口号<br>
-m/--max-time <seconds> 设置最大传输时间<br>
--max-redirs <num> 设置最大读取的目录数<br>
--max-filesize <bytes> 设置最大下载的文件总量<br>
-M/--manual  显示全手动<br>
-n/--netrc 从netrc文件中读取用户名和密码<br>
--netrc-optional 使用 .netrc 或者 URL来覆盖-n<br>
--ntlm          使用 HTTP NTLM 身份验证<br>
-N/--no-buffer 禁用缓冲输出<br>
-o/--output 把输出写到该文件中<br>
-O/--remote-name 把输出写到该文件中，保留远程文件的文件名<br>
-p/--proxytunnel   使用HTTP代理<br>
--proxy-anyauth 选择任一代理身份验证方法<br>
--proxy-basic   在代理上使用基本身份验证<br>
--proxy-digest  在代理上使用数字身份验证<br>
--proxy-ntlm    在代理上使用ntlm身份验证<br>
-P/--ftp-port <address> 使用端口地址，而不是使用PASV<br>
-Q/--quote <cmd>文件传输前，发送命令到服务器<br>
-r/--range <range>检索来自HTTP/1.1或FTP服务器字节范围<br>
--range-file 读取（SSL）的随机文件<br>
-R/--remote-time   在本地生成文件时，保留远程文件时间<br>
--retry <num>   传输出现问题时，重试的次数<br>
--retry-delay <seconds>  传输出现问题时，设置重试间隔时间<br>
--retry-max-time <seconds> 传输出现问题时，设置最大重试时间<br>
-s/--silent静音模式。不输出任何东西<br>
-S/--show-error   显示错误<br>
--socks4 &lt;host[:port]&gt; 用socks4代理给定主机和端口<br>
--socks5 &lt;host[:port]&gt; 用socks5代理给定主机和端口<br>
--stderr <file><br>
-t/--telnet-option &lt;OPT=val&gt; Telnet选项设置<br>
--trace <file>  对指定文件进行debug<br>
--trace-ascii <file> Like --跟踪但没有hex输出<br>
--trace-time    跟踪/详细输出时，添加时间戳<br>
-T/--upload-file <file> 上传文件<br>
--url <URL>     Spet URL to work with<br>
-u/--user &lt;user[:password]&gt;设置服务器的用户和密码<br>
-U/--proxy-user &lt;user[:password]&gt;设置代理用户名和密码<br>
-v/--verbose<br>
-V/--version 显示版本信息<br>
-w/--write-out [format]什么输出完成后<br>
-x/--proxy &lt;host[:port]&gt;在给定的端口上使用HTTP代理<br>
-X/--request <command>指定什么命令<br>
-y/--speed-time 放弃限速所要的时间。默认为30<br>
-Y/--speed-limit 停止传输速度的限制，速度时间'秒<br>
-z/--time-cond  传送时间设置<br>
-0/--http1.0  使用HTTP 1.0<br>
-1/--tlsv1  使用TLSv1（SSL）<br>
-2/--sslv2 使用SSLv2的（SSL）<br>
-3/--sslv3         使用的SSLv3（SSL）<br>
--3p-quote      like -Q for the source URL for 3rd party transfer<br>
--3p-url        使用url，进行第三方传送<br>
--3p-user       使用用户名和密码，进行第三方传送<br>
-4/--ipv4   使用IP4<br>
-6/--ipv6   使用IP6<br>
-#/--progress-bar 用进度条显示当前的传送状态</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[正则匹配标点符号]]></title>
        <id>https://wang19ccn.github.io/post/zheng-ze-pi-pei-biao-dian-fu-hao/</id>
        <link href="https://wang19ccn.github.io/post/zheng-ze-pi-pei-biao-dian-fu-hao/">
        </link>
        <updated>2021-08-01T17:29:30.000Z</updated>
        <content type="html"><![CDATA[<p><code>/[\u3002|\uff1f|\uff01|\uff0c|\u3001|\uff1b|\uff1a|\u201c|\u201d|\u2018|\u2019|\uff08|\uff09|\u300a|\u300b|\u3008|\u3009|\u3010|\u3011|\u300e|\u300f|\u300c|\u300d|\ufe43|\ufe44|\u3014|\u3015|\u2026|\u2014|\uff5e|\ufe4f|\uffe5]/g</code></p>
<p>参考：<br>
https://blog.csdn.net/cysear/article/details/80435756</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git学习笔记]]></title>
        <id>https://wang19ccn.github.io/post/git-xue-xi-bi-ji/</id>
        <link href="https://wang19ccn.github.io/post/git-xue-xi-bi-ji/">
        </link>
        <updated>2021-08-01T17:00:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="一-版本控制">一、版本控制</h3>
<ul>
<li>本地版本控制系统</li>
<li>集中化版本控制系统（解决了本地版本控制系统，但会面临服务器宕机、丢失等问题）</li>
<li>分布式版本控制系统</li>
</ul>
<h3 id="二-git版本与配置">二、Git版本与配置</h3>
<p><code>git --version</code> 查看git版本信息</p>
<p><code>git config --global user.name “username”</code> 设置名字</p>
<p><code>git config --global user.email &quot;useremail&quot;</code>设置电子邮件</p>
<p><code>git config -l (-list)</code> 查看配置</p>
<h3 id="三-git文件的三种状态和工作模式">三、Git文件的三种状态和工作模式</h3>
<table>
<thead>
<tr>
<th>状态</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>已提交（committed）</td>
<td>已提交表示数据已经安全的保存在本地数据中。</td>
</tr>
<tr>
<td>已修改（modified）</td>
<td>已修改表示修改了文件，但还没保存到数据库中。</td>
</tr>
<tr>
<td>已暂存（staged）</td>
<td>已暂存表示一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>分类</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>工作区</td>
<td>本地目录</td>
</tr>
<tr>
<td>暂存区</td>
<td></td>
</tr>
<tr>
<td>Git仓库</td>
<td></td>
</tr>
</tbody>
</table>
<p>基本git的工作流程描述如下：</p>
<ul>
<li>在工作</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://wang19ccn.github.io//post-images/1627844993867.png" alt="" loading="lazy"></figure>
<h3 id="四-创建本地仓库与提交文件">四、创建本地仓库与提交文件</h3>
<h5 id="初始化本地仓库">初始化本地仓库</h5>
<p><code>git init</code> 初始化仓库</p>
<h5 id="提交流程">提交流程</h5>
<ol>
<li>
<p><code>git status</code> 查看工作目录与暂存区文件状态</p>
</li>
<li>
<p><code>git add &lt;file&gt;</code>  命令添加文件到暂存区</p>
<p><code>git rm --cached &lt;file&gt;</code> <strong>删除</strong>暂存区文件</p>
</li>
<li>
<p><code>git commit -m</code> 提交信息</p>
</li>
</ol>
<h5 id="查看提交记录">查看提交记录</h5>
<p><code>git log</code> 显示提交日志信息</p>
<h3 id="五-文件修改与提交">五、文件修改与提交</h3>
<ol>
<li>
<p><code>git add .</code> 提交当前目录</p>
</li>
<li>
<p><code>git commit</code> 强制输入（i - 编辑模式，esc，:wq - 保存并退出）</p>
</li>
<li>
<p><code>git diff HEAD -- git01.txt</code> 对比差异</p>
</li>
<li>
<p><code>git restore --staged git02.txt</code> 从暂存区<strong>撤销</strong>文件</p>
<p><code>git reset HEAD git02.txt</code> <strong>取消上一次操作</strong></p>
</li>
</ol>
<h3 id="六-版本回退-时光穿梭机">六、版本回退-时光穿梭机</h3>
<ol>
<li>
<p><code>git commit -am '提交信息'</code>  添加当前目录文件并提交信息</p>
</li>
<li>
<p><code>git log --pretty=oneline</code>  只展示id和信息</p>
</li>
<li>
<p><code>git reset --hard HEAD^</code> 回退一个版本</p>
<p><code>git reset --hard HEAD~2</code> 回退两次</p>
<p><code>git reset --hard 版本号</code> （取唯一一段就行）</p>
</li>
<li>
<p><code>git reflog</code> 查看所有操作历史记录</p>
</li>
</ol>
<h3 id="七-文件删除">七、文件删除</h3>
<h5 id="手动删除工作区文件会被git视为一种操作">手动删除工作区文件（会被git视为一种操作）</h5>
<p><code>git ls-files</code> 查看工作区文件</p>
<p><code>git checkout &lt;文件名&gt;</code>  恢复文件</p>
<h5 id="rm指令删除会同时删除git仓库和工作区">rm指令删除（会同时删除git仓库和工作区）</h5>
<p><code>git rm &lt;文件名&gt;</code></p>
<h3 id="八-远程仓库">八、远程仓库</h3>
<p><strong>Github/码云</strong> 开源远程仓库</p>
<p><strong>GitLab</strong> 企业搭建内部远程仓库</p>
<h3 id="九-ssh下载项目">九、SSH下载项目</h3>
<p>ssh更加安全和下载效率高</p>
<p>public key 看公司生成方法</p>
<h3 id="十-远程仓库推送">十、远程仓库推送</h3>
<p><code>git remote add origin &lt;地址&gt;</code></p>
<p><code>git push -u origin master</code></p>
<p>绑定只做一次，之后git push即可</p>
<h3 id="十一-本地分支操作">十一、本地分支操作</h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>git checkout branch</code></td>
<td>切换到指定分支</td>
</tr>
<tr>
<td><code>git checkout -b new_branch</code></td>
<td>新建分支并切换到新建分支</td>
</tr>
<tr>
<td><code>git branch -d|-D branch</code></td>
<td>删除指定分支 -D强制删除</td>
</tr>
<tr>
<td><code>git branch</code></td>
<td>查看所有分支，并用 * 号标记当前所在分支</td>
</tr>
<tr>
<td><code>git merge branch</code></td>
<td>合并分支**（务必切换到主干上在合并分支）**</td>
</tr>
<tr>
<td><code>git branch -m|-M oldbranch newbranch</code></td>
<td>重命名分支，如果newbranch名字分支已经存在，则需要使用-M强制重新命名，否则-m进行重命名</td>
</tr>
</tbody>
</table>
<h3 id="十二-远程分支操作">十二、远程分支操作</h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>git branch -a</code></td>
<td>查看本地与远程分支</td>
</tr>
<tr>
<td><code>git push origin branch_name</code></td>
<td>推送本地分支到远程</td>
</tr>
<tr>
<td><code>git push origin :remote_branch</code></td>
<td>删除远程分支（本地分支还在保留）</td>
</tr>
<tr>
<td><code>git checkout -b local_branch origin/remote_branch</code></td>
<td>拉取远程指定分支并在本地创建分支</td>
</tr>
</tbody>
</table>
<p>git fetch 获取远程仓库最新状态</p>
<h3 id="十三-分支冲突解决">十三、分支冲突解决</h3>
<p>同一个文件同一行出现问题，直接修改文件，重新提交</p>
<h3 id="十四-多人协同冲突解决">十四、多人协同冲突解决</h3>
<p>同上，在推送前，先git pull</p>
<h3 id="十五-标签管理">十五、标签管理</h3>
<p>git tag tag_name</p>
<p>git tag -a tag_name -m 'xxx'</p>
<p>一些文档地址</p>
<p>[gitk - <a href="https://www.php.cn/manual/view/35079.html"> Git中文开发手册 ] (php.cn)</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[笔记][网站优化]23条网站性能优化建议]]></title>
        <id>https://wang19ccn.github.io/post/bi-ji-wang-zhan-you-hua-23-tiao-wang-zhan-xing-neng-you-hua-jian-yi/</id>
        <link href="https://wang19ccn.github.io/post/bi-ji-wang-zhan-you-hua-23-tiao-wang-zhan-xing-neng-you-hua-jian-yi/">
        </link>
        <updated>2021-07-12T16:23:38.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>雅虎团队的23条网站性能优化军规</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Axios拦截器]]></title>
        <id>https://wang19ccn.github.io/post/axios-lan-jie-qi/</id>
        <link href="https://wang19ccn.github.io/post/axios-lan-jie-qi/">
        </link>
        <updated>2021-07-11T17:25:41.000Z</updated>
        <content type="html"><![CDATA[<p>施工中</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue常见知识]]></title>
        <id>https://wang19ccn.github.io/post/vue-chang-jian-zhi-shi/</id>
        <link href="https://wang19ccn.github.io/post/vue-chang-jian-zhi-shi/">
        </link>
        <updated>2021-07-11T17:18:35.000Z</updated>
        <content type="html"><![CDATA[<p>施工中！！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea ！！]]></title>
        <id>https://wang19ccn.github.io/post/hello-gridea/</id>
        <link href="https://wang19ccn.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>